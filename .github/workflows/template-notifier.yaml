name: Watch for New YAML Files

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  notify_new_yaml:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Setup persistent notification history
      - name: Setup notification history
        id: setup
        run: |
          mkdir -p .notified
          touch .notified/history.txt
          # Create a clean copy without empty lines or duplicates
          sort -u .notified/history.txt -o .notified/history.txt.tmp
          mv .notified/history.txt.tmp .notified/history.txt

      # Step 2: Get the latest commit SHA
      - name: Get latest commit SHA
        id: get_sha
        run: |
          SHA=$(curl -s https://api.github.com/repos/anderwordzkkkz/nuclei-templates/commits/main | jq -r .sha)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      # Step 3: Find all newly added YAML files
      - name: Find new YAML files
        id: find_files
        run: |
          curl -s https://api.github.com/repos/anderwordzkkkz/nuclei-templates/contents/ \
          | jq -r '.[] | select(.name | endswith(".yaml")) | .name' > all_templates.txt
          
          # Filter out already notified files
          comm -23 <(sort all_templates.txt) <(sort .notified/history.txt) > new_templates.txt || true
          echo "count=$(wc -l < new_templates.txt)" >> $GITHUB_OUTPUT

      # Step 4: Send notification ONLY for truly new files
      - name: Send Discord Notification
        if: steps.find_files.outputs.count != '0'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Send notification
          MESSAGE="ðŸ§© **New Nuclei YAML Templates Added!**"
          while read FILE; do
            MESSAGE="$MESSAGE\n- \`$FILE\` <https://github.com/anderwordzkkkz/nuclei-templates/blob/main/$FILE>"
          done < new_templates.txt

          echo -e "$MESSAGE" | jq -Rs '{content: .}' > payload.json
          curl -H "Content-Type: application/json" -X POST -d @payload.json "$DISCORD_WEBHOOK"

          # Update history IMMEDIATELY after successful notification
          cat new_templates.txt >> .notified/history.txt
          sort -u .notified/history.txt -o .notified/history.txt

      # Step 5: Persist the notification history
      - name: Save notification history
        uses: actions/cache@v4
        with:
          path: .notified/history.txt
          key: notified-history-${{ hashFiles('.notified/history.txt') }}
